{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"com",
				"completed"
			],
			[
				"use",
				"userA"
			],
			[
				"res",
				"responseString"
			],
			[
				"log",
				"log_message"
			],
			[
				"user",
				"user_a"
			],
			[
				"u_",
				"u_balance"
			],
			[
				"hi",
				"hide"
			],
			[
				"c",
				"c"
			],
			[
				"comp",
				"company_name"
			],
			[
				"val",
				"value"
			],
			[
				"va",
				"val"
			],
			[
				"con",
				"console"
			],
			[
				"inf",
				"info_back"
			],
			[
				"lo",
				"log"
			],
			[
				"Po",
				"POST"
			],
			[
				"Pass",
				"Password"
			],
			[
				"fun",
				"function"
			],
			[
				"seller_",
				"seller_pass"
			],
			[
				"pa",
				"password"
			],
			[
				"i",
				"id\tAttr"
			],
			[
				"s",
				"script"
			],
			[
				"pr",
				"print"
			],
			[
				"F",
				"False"
			],
			[
				"is_p",
				"is_paid"
			],
			[
				"is",
				"is_paid"
			],
			[
				"mem",
				"mem_t"
			],
			[
				"Mem",
				"MempershipPayement"
			],
			[
				"ge",
				"get_absolute_url"
			],
			[
				"a",
				"addAdvertise"
			],
			[
				"hTT",
				"HttpResponseRedirect"
			],
			[
				"RETU",
				"return"
			],
			[
				"login",
				"login_required"
			],
			[
				"fo",
				"forms"
			],
			[
				"sen",
				"send_notice"
			],
			[
				"mar",
				"margin-top"
			],
			[
				"fon",
				"font-style"
			],
			[
				"def",
				"default"
			],
			[
				"valu",
				"values_list"
			],
			[
				"se",
				"seller"
			],
			[
				"ac",
				"action\tAttr"
			],
			[
				"r",
				"reverse"
			],
			[
				"seller",
				"seller_id"
			],
			[
				"al",
				"alt\tAttr"
			],
			[
				"op",
				"option\tTag"
			],
			[
				"us",
				"user"
			],
			[
				"d",
				"Date"
			],
			[
				"g",
				"getElementById"
			],
			[
				"ma",
				"margin"
			],
			[
				"reu",
				"return"
			],
			[
				"re",
				"request"
			],
			[
				"for",
				"form"
			],
			[
				"form",
				"form_class"
			],
			[
				"au",
				"autofocus\tAttr"
			],
			[
				"in",
				"input\tTag"
			],
			[
				"sel",
				"self"
			],
			[
				"H",
				"HttpResponseRedirect"
			],
			[
				"h",
				"h1\tTag"
			],
			[
				"col",
				"color"
			],
			[
				"t",
				"td\tTag"
			],
			[
				"border-ra",
				"border-radius"
			],
			[
				"bor",
				"border-style"
			],
			[
				"sty",
				"style"
			],
			[
				"li",
				"link\tTag"
			],
			[
				"margin",
				"margin-top"
			],
			[
				"wi",
				"width"
			],
			[
				"on",
				"onSuccess"
			],
			[
				"me",
				"meta\tTag"
			]
		]
	},
	"buffers":
	[
		{
			"file": "start.sh",
			"settings":
			{
				"buffer_size": 825,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "app-webservice/Dockerfile",
			"settings":
			{
				"buffer_size": 274,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "app-webservice/routes/index.js",
			"settings":
			{
				"buffer_size": 5574,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "chaincode/ccpe_chaincode.go",
			"settings":
			{
				"buffer_size": 7950,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/*\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n  http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n*/\n\npackage main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"strconv\"\n\t\"encoding/json\"\n\t\"time\"\n\t\"strings\"\n\n\t\"github.com/hyperledger/fabric/core/chaincode/shim\"\n)\n\n// SimpleChaincode example simple Chaincode implementation\ntype SimpleChaincode struct {\n}\n\nvar pointIndexStr = \"_pointindex\"\t\t\t\t//name for the key/value that will store a list of all known points\nvar transectionStr = \"_tx\"\t\t\t\t        //name for the key/value that will store all completed transactions\n//var tmpRelatedPoint = \"_tmpRelatedPoint\"\n//var tmpStr = \"_tmpIndex\"\n\n//var minimalTxStr = \"_minimaltx\"\n\ntype Point struct{\n\tId string `json:\"id\"`\t\t\t\t\t   //the fieldtags are needed to keep case from bouncing around\n\tOwner string `json:\"owner\"`\n\tAmount int `json:\"amount\"`\t\n}\n\ntype Transaction struct{\n\tId string `json:\"txID\"`\t\t\t\t\t   //Transaction ID from cppe system\n\tTimestamp string `json:\"ex_time\"`\t\t   //utc timestamp of creation\n\tTraderA string  `json:\"user_A_ID\"`\t\t   //UserA ID\n\tTraderB string  `json:\"user_B_ID\"`         //UserB ID\n\tSellerA string  `json:\"seller_A_ID\"`\t   //UserA's Seller ID\n\tSellerB string  `json:\"seller_B_ID\"`       //UserB's Seller ID\n\tPointA string  `json:\"point_A\"`            //Points owned by UserA after exchange\n\tPointB string  `json:\"point_B\"`            //Points owned by UserB after exchange\n\t//Related []Point `json:\"related\"`\t\t   //array of points willing to trade away\n}\n\n\ntype AllTx struct{\n\tTXs []Transaction `json:\"tx\"`\n}\n\n\n// ============================================================================================================================\n// Main\n// ============================================================================================================================\nfunc main() {\n\terr := shim.Start(new(SimpleChaincode))\n\tif err != nil {\n\t\tfmt.Printf(\"Error starting Simple chaincode: %s\", err)\n\t}\n}\n\n// ============================================================================================================================\n// Init - reset all the things\n// ============================================================================================================================\nfunc (t *SimpleChaincode) Init(stub shim.ChaincodeStubInterface, function string, args []string) ([]byte, error) {\n\tvar Aval int\n\tvar err error\n\n\tif len(args) != 1 {\n\t\treturn nil, errors.New(\"Incorrect number of arguments. Expecting 1\")\n\t}\n\n\t// Initialize the chaincode\n\tAval, err = strconv.Atoi(args[0])\n\tif err != nil {\n\t\treturn nil, errors.New(\"Expecting integer value for asset holding\")\n\t}\n\n\t// Write the state to the ledger\n\terr = stub.PutState(\"abc\", []byte(strconv.Itoa(Aval)))\t\t\t\t//making a test var \"abc\", I find it handy to read/write to it right away to test the network\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\tvar empty []string\n\tjsonAsBytes, _ := json.Marshal(empty)\t\t\t\t\t\t\t\t//marshal an emtpy array of strings to clear the index\n\terr = stub.PutState(pointIndexStr, jsonAsBytes)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\t/*err = stub.PutState(tmpRelatedPoint, jsonAsBytes)\n\tif err != nil {\n\t\treturn nil, err\n\t}*/\n\n/*\terr = stub.PutState(tmpStr, jsonAsBytes)\n\tif err != nil {\n\t\treturn nil, err\n\t}*/\n\n\n\tvar trades AllTx\n\tjsonAsBytes, _ = json.Marshal(trades)\t\t\t\t\t\t\t\t//clear the open trade struct\n\terr = stub.PutState(transectionStr, jsonAsBytes)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n/*\terr = stub.PutState(minimalTxStr, jsonAsBytes)\n\tif err != nil {\n\t\treturn nil, err\n\t}*/\n\t\n\treturn nil, nil\n}\n\n// ============================================================================================================================\n// Run - Our entry point for Invocations - [LEGACY] obc-peer 4/25/2016\n// ============================================================================================================================\nfunc (t *SimpleChaincode) Run(stub shim.ChaincodeStubInterface, function string, args []string) ([]byte, error) {\n\tfmt.Println(\"run is running \" + function)\n\treturn t.Invoke(stub, function, args)\n}\n\n// ============================================================================================================================\n// Invoke - Our entry point for Invocations\n// ============================================================================================================================\nfunc (t *SimpleChaincode) Invoke(stub shim.ChaincodeStubInterface, function string, args []string) ([]byte, error) {\n\tfmt.Println(\"invoke is running \" + function)\n\n\t// Handle different functions\n\tif function == \"init\" {\t\t\t\t\t\t\t\t\t\t\t\t\t//initialize the chaincode state, used as reset\n\t\treturn t.Init(stub, \"init\", args)\n\t} else if function == \"delete\" {\t\t\t\t\t\t\t\t\t\t//deletes an entity from its state\n\t\tres, err := t.Delete(stub, args)\n\t\t//cleanTrades(stub)\t\t\t\t\t\t\t\t\t\t\t\t\t//lets make sure all open trades are still valid\n\t\treturn res, err\n\t} else if function == \"write\" {\t\t\t\t\t\t\t\t\t\t\t//writes a value to the chaincode state\n\t\treturn t.Write(stub, args)\n\t} /*else if function == \"init_point\" {\t\t\t\t\t\t\t\t\t//create a new marble\n\t\treturn t.init_point(stub, args)\n\t} *//* else if function == \"set_user\" {\t\t\t\t\t\t\t\t\t\t//change owner of a marble\n\t\tres, err := t.set_user(stub, args)\n\t\t//cleanTrades(stub)\t\t\t\t\t\t\t\t\t\t\t\t\t//lets make sure all open trades are still valid\n\t\treturn res, err\n\t} else if function == \"findPointWithOwner\"{\n\t\tres, err:= t.findPointWithOwner(stub, args)\n\t\treturn res,err\n\t} else if function == \"test\"{\n\t\treturn t.test(stub, args)\n\t} else if function == \"init_transaction\" {\t\t\t\t\t\t\t\t\t//create a new trade order\n\t\treturn t.init_transaction(stub, args)\n    }*/\n    /*\n\t else if function == \"perform_trade\" {\t\t\t\t\t\t\t\t\t//forfill an open trade order\n\t\tres, err := t.perform_trade(stub, args)\n\t\tcleanTrades(stub)\t\t\t\t\t\t\t\t\t\t\t\t\t//lets clean just in case\n\t\treturn res, err\n\t} else if function == \"remove_trade\" {\t\t\t\t\t\t\t\t\t//cancel an open trade order\n\t\treturn t.remove_trade(stub, args)\n\t}*/\n\tfmt.Println(\"invoke did not find func: \" + function)\t\t\t\t\t//error\n\n\treturn nil, errors.New(\"Received unknown function invocation\")\n}\n\n// ============================================================================================================================\n// Query - Our entry point for Queries\n// ============================================================================================================================\nfunc (t *SimpleChaincode) Query(stub shim.ChaincodeStubInterface, function string, args []string) ([]byte, error) {\n\tfmt.Println(\"query is running \" + function)\n\n\t// Handle different functions\n\tif function == \"read\" {\t\t\t\t\t\t\t\t\t\t\t\t\t//read a variable\n\t\treturn t.read(stub, args)\n\t}\n\tfmt.Println(\"query did not find func: \" + function)\t\t\t\t\t\t//error\n\n\treturn nil, errors.New(\"Received unknown function query\")\n}\n\n// ============================================================================================================================\n// Read - read a variable from chaincode state\n// ============================================================================================================================\nfunc (t *SimpleChaincode) read(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {\n\tvar name, jsonResp string\n\tvar err error\n\n\tif len(args) != 1 {\n\t\treturn nil, errors.New(\"Incorrect number of arguments. Expecting name of the var to query\")\n\t}\n\n\tname = args[0]\n\tvalAsbytes, err := stub.GetState(name)\t\t\t\t\t\t\t\t\t//get the var from chaincode state\n\tif err != nil {\n\t\tjsonResp = \"{\\\"Error\\\":\\\"Failed to get state for \" + name + \"\\\"}\"\n\t\treturn nil, errors.New(jsonResp)\n\t}\n\n\treturn valAsbytes, nil\t\t\t\t\t\t\t\t\t\t\t\t\t//send it onward\n}\n\n// ============================================================================================================================\n// Delete - remove a key/value pair from state\n// ============================================================================================================================\nfunc (t *SimpleChaincode) Delete(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {\n\tif len(args) != 1 {\n\t\treturn nil, errors.New(\"Incorrect number of arguments. Expecting 1\")\n\t}\n\t\n\tname := args[0]\n\terr := stub.DelState(name)\t\t\t\t\t\t\t\t\t\t\t\t\t//remove the key from chaincode state\n\tif err != nil {\n\t\treturn nil, errors.New(\"Failed to delete state\")\n\t}\n\n\t//get the marble index\n\tmarblesAsBytes, err := stub.GetState(marbleIndexStr)\n\tif err != nil {\n\t\treturn nil, errors.New(\"Failed to get marble index\")\n\t}\n\tvar marbleIndex []string\n\tjson.Unmarshal(marblesAsBytes, &marbleIndex)\t\t\t\t\t\t\t\t//un stringify it aka JSON.parse()\n\t\n\t//remove marble from index\n\tfor i,val := range marbleIndex{\n\t\tfmt.Println(strconv.Itoa(i) + \" - looking at \" + val + \" for \" + name)\n\t\tif val == name{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//find the correct marble\n\t\t\tfmt.Println(\"found marble\")\n\t\t\tmarbleIndex = append(marbleIndex[:i], marbleIndex[i+1:]...)\t\t\t//remove it\n\t\t\tfor x:= range marbleIndex{\t\t\t\t\t\t\t\t\t\t\t//debug prints...\n\t\t\t\tfmt.Println(string(x) + \" - \" + marbleIndex[x])\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\tjsonAsBytes, _ := json.Marshal(marbleIndex)\t\t\t\t\t\t\t\t\t//save new index\n\terr = stub.PutState(marbleIndexStr, jsonAsBytes)\n\treturn nil, nil\n}\n\n// ============================================================================================================================\n// Write - write variable into chaincode state\n// ============================================================================================================================\nfunc (t *SimpleChaincode) Write(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {\n\tvar name, value string // Entities\n\tvar err error\n\tfmt.Println(\"running write()\")\n\n\tif len(args) != 2 {\n\t\treturn nil, errors.New(\"Incorrect number of arguments. Expecting 2. name of the variable and value to set\")\n\t}\n\n\tname = args[0]\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//rename for funsies\n\tvalue = args[1]\n\terr = stub.PutState(name, []byte(value))\t\t\t\t\t\t\t\t//write the variable into the chaincode state\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn nil, nil\n}\n\n// ============================================================================================================================\n// Init Point - create a new marble, store into chaincode state\n// ============================================================================================================================\n/*\nfunc (t *SimpleChaincode) init_point(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {\n\tvar err error\n\n\t//   0       1       2     3\n\t// \"asdf\", \"blue\", \"35\", \"bob\"\n\tif len(args) != 4 {\n\t\treturn nil, errors.New(\"Incorrect number of arguments. Expecting 4\")\n\t}\n\n\t//input sanitation\n\tfmt.Println(\"- start init marble\")\n\tif len(args[0]) <= 0 {\n\t\treturn nil, errors.New(\"1st argument must be a non-empty string\")\n\t}\n\tif len(args[1]) <= 0 {\n\t\treturn nil, errors.New(\"2nd argument must be a non-empty string\")\n\t}\n\tif len(args[2]) <= 0 {\n\t\treturn nil, errors.New(\"3rd argument must be a non-empty string\")\n\t}\n\tif len(args[3]) <= 0 {\n\t\treturn nil, errors.New(\"4th argument must be a non-empty string\")\n\t}\n\tname := args[0]\n\tcolor := strings.ToLower(args[1])\n\tuser := strings.ToLower(args[3])\n\tsize, err := strconv.Atoi(args[2])\n\tif err != nil {\n\t\treturn nil, errors.New(\"3rd argument must be a numeric string\")\n\t}\n\n\t//check if marble already exists\n\tmarbleAsBytes, err := stub.GetState(name)\n\tif err != nil {\n\t\treturn nil, errors.New(\"Failed to get marble name\")\n\t}\n\tres := Marble{}\n\tjson.Unmarshal(marbleAsBytes, &res)\n\tif res.Name == name{\n\t\tfmt.Println(\"This marble arleady exists: \" + name)\n\t\tfmt.Println(res);\n\t\treturn nil, errors.New(\"This marble arleady exists\")\t\t\t\t//all stop a marble by this name exists\n\t}\n\t\n\t//build the marble json string manually\n\tstr := `{\"name\": \"` + name + `\", \"color\": \"` + color + `\", \"size\": ` + strconv.Itoa(size) + `, \"user\": \"` + user + `\"}`\n\terr = stub.PutState(name, []byte(str))\t\t\t\t\t\t\t\t\t//store marble with id as key\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\t\n\t//get the marble index\n\tmarblesAsBytes, err := stub.GetState(marbleIndexStr)\n\tif err != nil {\n\t\treturn nil, errors.New(\"Failed to get marble index\")\n\t}\n\tvar marbleIndex []string\n\tjson.Unmarshal(marblesAsBytes, &marbleIndex)\t\t\t\t\t\t\t//un stringify it aka JSON.parse()\n\t\n\t//append\n\tmarbleIndex = append(marbleIndex, name)\t\t\t\t\t\t\t\t\t//add marble name to index list\n\tfmt.Println(\"! marble index: \", marbleIndex)\n\tjsonAsBytes, _ := json.Marshal(marbleIndex)\n\terr = stub.PutState(marbleIndexStr, jsonAsBytes)\t\t\t\t\t\t//store name of marble\n\n\tfmt.Println(\"- end init marble\")\n\treturn nil, nil\n}\n*/\n\n/*\nfunc (t *SimpleChaincode) init_transaction(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {\n\tvar err error\t\n\t//\t0        1      2     3      4      5       6\n\t//[\"bob\", \"blue\", \"16\", \"red\", \"16\"] *\"blue\", \"35*\n\n\n\n\tcompleted := Transaction{}\n\tcompleted.Id = args[0]\n\tcompleted.TraderA = args[1]\n\tcompleted.TraderB = args[2]\n\tcompleted.SellerA = args[3]\n\tcompleted.SellerB = args[4]\n\tcompleted.PointA = args[5]\n\tcompleted.PointB = args[6]\n\tcompleted.Timestamp = args[7]\n\t\n\tfmt.Println(\"- start completed trade\")\n\tjsonAsBytes, _ := json.Marshal(completed)\n\terr = stub.PutState(\"_debug1\", jsonAsBytes)\n\n\t//get the completed trade struct\n\ttradesAsBytes, err := stub.GetState(pointIndexStr)\n\tif err != nil {\n\t\treturn nil, errors.New(\"Failed to get TXs\")\n\t}\n\n\tvar trades AllTx\n\tjson.Unmarshal(tradesAsBytes, &trades)\t\t\t\t\t\t\t\t\t\t//un stringify it aka JSON.parse()\n\t\n\ttrades.TXs = append(trades.TXs, completed);\t\t\t\t\t\t//append to completed trades\n\tfmt.Println(\"! appended completed to trades\")\n\tjsonAsBytes, _ = json.Marshal(trades)\n\terr = stub.PutState(pointIndexStr, jsonAsBytes)\t\t\t\t\t\t\t\t//rewrite completed orders\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfmt.Println(\"- end completed trade \")\n\treturn nil, nil\n}*/\n\n\n// ============================================================================================================================\n// Set User Permission on Marble\n// ============================================================================================================================\n/*\nfunc (t *SimpleChaincode) set_user(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {\n\tvar err error\n\t\n\t//   0       1\n\t// \"name\", \"bob\"\n\tif len(args) < 2 {\n\t\treturn nil, errors.New(\"Incorrect number of arguments. Expecting 2\")\n\t}\n\t\n\tfmt.Println(\"- start set user\")\n\tfmt.Println(args[0] + \" - \" + args[1])\n\tmarbleAsBytes, err := stub.GetState(args[0])\n\tif err != nil {\n\t\treturn nil, errors.New(\"Failed to get thing\")\n\t}\n\tres := Marble{}\n\tjson.Unmarshal(marbleAsBytes, &res)\t\t\t\t\t\t\t\t\t\t//un stringify it aka JSON.parse()\n\tres.User = args[1]\t\t\t\t\t\t\t\t\t\t\t\t\t\t//change the user\n\t\n\tjsonAsBytes, _ := json.Marshal(res)\n\terr = stub.PutState(args[0], jsonAsBytes)\t\t\t\t\t\t\t\t//rewrite the marble with id as key\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\t\n\tfmt.Println(\"- end set user\")\n\treturn nil, nil\n}\n*/\n// ============================================================================================================================\n// Open Trade - create an open trade for a marble you want with marbles you have \n// ============================================================================================================================\n/*\nfunc (t *SimpleChaincode) open_trade(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {\n\tvar err error\n\tvar will_size int\n\tvar trade_away Description\n\t\n\t//\t0        1      2     3      4      5       6\n\t//[\"bob\", \"blue\", \"16\", \"red\", \"16\"] *\"blue\", \"35*\n\tif len(args) < 5 {\n\t\treturn nil, errors.New(\"Incorrect number of arguments. Expecting like 5?\")\n\t}\n\tif len(args)%2 == 0{\n\t\treturn nil, errors.New(\"Incorrect number of arguments. Expecting an odd number\")\n\t}\n\n\tsize1, err := strconv.Atoi(args[2])\n\tif err != nil {\n\t\treturn nil, errors.New(\"3rd argument must be a numeric string\")\n\t}\n\n\topen := AnOpenTrade{}\n\topen.User = args[0]\n\topen.Timestamp = makeTimestamp()\t\t\t\t\t\t\t\t\t\t\t//use timestamp as an ID\n\topen.Want.Color = args[1]\n\topen.Want.Size =  size1\n\tfmt.Println(\"- start open trade\")\n\tjsonAsBytes, _ := json.Marshal(open)\n\terr = stub.PutState(\"_debug1\", jsonAsBytes)\n\n\tfor i:=3; i < len(args); i++ {\t\t\t\t\t\t\t\t\t\t\t\t//create and append each willing trade\n\t\twill_size, err = strconv.Atoi(args[i + 1])\n\t\tif err != nil {\n\t\t\tmsg := \"is not a numeric string \" + args[i + 1]\n\t\t\tfmt.Println(msg)\n\t\t\treturn nil, errors.New(msg)\n\t\t}\n\t\t\n\t\ttrade_away = Description{}\n\t\ttrade_away.Color = args[i]\n\t\ttrade_away.Size =  will_size\n\t\tfmt.Println(\"! created trade_away: \" + args[i])\n\t\tjsonAsBytes, _ = json.Marshal(trade_away)\n\t\terr = stub.PutState(\"_debug2\", jsonAsBytes)\n\t\t\n\t\topen.Willing = append(open.Willing, trade_away)\n\t\tfmt.Println(\"! appended willing to open\")\n\t\ti++;\n\t}\n\t\n\t//get the open trade struct\n\ttradesAsBytes, err := stub.GetState(openTradesStr)\n\tif err != nil {\n\t\treturn nil, errors.New(\"Failed to get opentrades\")\n\t}\n\tvar trades AllTrades\n\tjson.Unmarshal(tradesAsBytes, &trades)\t\t\t\t\t\t\t\t\t\t//un stringify it aka JSON.parse()\n\t\n\ttrades.OpenTrades = append(trades.OpenTrades, open);\t\t\t\t\t\t//append to open trades\n\tfmt.Println(\"! appended open to trades\")\n\tjsonAsBytes, _ = json.Marshal(trades)\n\terr = stub.PutState(openTradesStr, jsonAsBytes)\t\t\t\t\t\t\t\t//rewrite open orders\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfmt.Println(\"- end open trade\")\n\treturn nil, nil\n}\n\n// ============================================================================================================================\n// Perform Trade - close an open trade and move ownership\n// ============================================================================================================================\nfunc (t *SimpleChaincode) perform_trade(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {\n\tvar err error\n\t\n\t//\t0\t\t1\t\t\t\t\t2\t\t\t\t\t3\t\t\t\t4\t\t\t\t\t5\n\t//[data.id, data.closer.user, data.closer.name, data.opener.user, data.opener.color, data.opener.size]\n\tif len(args) < 6 {\n\t\treturn nil, errors.New(\"Incorrect number of arguments. Expecting 6\")\n\t}\n\t\n\tfmt.Println(\"- start close trade\")\n\ttimestamp, err := strconv.ParseInt(args[0], 10, 64)\n\tif err != nil {\n\t\treturn nil, errors.New(\"1st argument must be a numeric string\")\n\t}\n\t\n\tsize, err := strconv.Atoi(args[5])\n\tif err != nil {\n\t\treturn nil, errors.New(\"6th argument must be a numeric string\")\n\t}\n\t\n\t//get the open trade struct\n\ttradesAsBytes, err := stub.GetState(openTradesStr)\n\tif err != nil {\n\t\treturn nil, errors.New(\"Failed to get opentrades\")\n\t}\n\tvar trades AllTrades\n\tjson.Unmarshal(tradesAsBytes, &trades)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//un stringify it aka JSON.parse()\n\t\n\tfor i := range trades.OpenTrades{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//look for the trade\n\t\tfmt.Println(\"looking at \" + strconv.FormatInt(trades.OpenTrades[i].Timestamp, 10) + \" for \" + strconv.FormatInt(timestamp, 10))\n\t\tif trades.OpenTrades[i].Timestamp == timestamp{\n\t\t\tfmt.Println(\"found the trade\");\n\t\t\t\n\t\t\t\n\t\t\tmarbleAsBytes, err := stub.GetState(args[2])\n\t\t\tif err != nil {\n\t\t\t\treturn nil, errors.New(\"Failed to get thing\")\n\t\t\t}\n\t\t\tclosersMarble := Marble{}\n\t\t\tjson.Unmarshal(marbleAsBytes, &closersMarble)\t\t\t\t\t\t\t\t\t\t\t//un stringify it aka JSON.parse()\n\t\t\t\n\t\t\t//verify if marble meets trade requirements\n\t\t\tif closersMarble.Color != trades.OpenTrades[i].Want.Color || closersMarble.Size != trades.OpenTrades[i].Want.Size {\n\t\t\t\tmsg := \"marble in input does not meet trade requriements\"\n\t\t\t\tfmt.Println(msg)\n\t\t\t\treturn nil, errors.New(msg)\n\t\t\t}\n\t\t\t\n\t\t\tmarble, e := findMarble4Trade(stub, trades.OpenTrades[i].User, args[4], size)\t\t\t//find a marble that is suitable from opener\n\t\t\tif(e == nil){\n\t\t\t\tfmt.Println(\"! no errors, proceeding\")\n\n\t\t\t\tt.set_user(stub, []string{args[2], trades.OpenTrades[i].User})\t\t\t\t\t\t//change owner of selected marble, closer -> opener\n\t\t\t\tt.set_user(stub, []string{marble.Name, args[1]})\t\t\t\t\t\t\t\t\t//change owner of selected marble, opener -> closer\n\t\t\t\n\t\t\t\ttrades.OpenTrades = append(trades.OpenTrades[:i], trades.OpenTrades[i+1:]...)\t\t//remove trade\n\t\t\t\tjsonAsBytes, _ := json.Marshal(trades)\n\t\t\t\terr = stub.PutState(openTradesStr, jsonAsBytes)\t\t\t\t\t\t\t\t\t\t//rewrite open orders\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn nil, err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfmt.Println(\"- end close trade\")\n\treturn nil, nil\n}\n*/\n// ============================================================================================================================\n// findPointWithOwner - look for a matching marble that this user owns and return it\n// ============================================================================================================================\n/*func findPointWithOwner(stub shim.ChaincodeStubInterface, user string, color string, size int )(m Marble, err error){\n\tvar fail Marble;\n\tfmt.Println(\"- start find marble 4 trade\")\n\tfmt.Println(\"looking for \" + user + \", \" + color + \", \" + strconv.Itoa(size));\n\n\t//get the marble index\n\tmarblesAsBytes, err := stub.GetState(marbleIndexStr)\n\tif err != nil {\n\t\treturn fail, errors.New(\"Failed to get marble index\")\n\t}\n\tvar marbleIndex []string\n\tjson.Unmarshal(marblesAsBytes, &marbleIndex)\t\t\t\t\t\t\t\t//un stringify it aka JSON.parse()\n\t\n\tfor i:= range marbleIndex{\t\t\t\t\t\t\t\t\t\t\t\t\t//iter through all the marbles\n\t\t//fmt.Println(\"looking @ marble name: \" + marbleIndex[i]);\n\n\t\tmarbleAsBytes, err := stub.GetState(marbleIndex[i])\t\t\t\t\t\t//grab this marble\n\t\tif err != nil {\n\t\t\treturn fail, errors.New(\"Failed to get marble\")\n\t\t}\n\t\tres := Marble{}\n\t\tjson.Unmarshal(marbleAsBytes, &res)\t\t\t\t\t\t\t\t\t\t//un stringify it aka JSON.parse()\n\t\t//fmt.Println(\"looking @ \" + res.User + \", \" + res.Color + \", \" + strconv.Itoa(res.Size));\n\t\t\n\t\t//check for user && color && size\n\t\tif strings.ToLower(res.User) == strings.ToLower(user) && strings.ToLower(res.Color) == strings.ToLower(color) && res.Size == size{\n\t\t\tfmt.Println(\"found a marble: \" + res.Name)\n\t\t\tfmt.Println(\"! end find marble 4 trade\")\n\t\t\treturn res, nil\n\t\t}\n\t}\n\t\n\tfmt.Println(\"- end find marble 4 trade - error\")\n\treturn fail, errors.New(\"Did not find marble to use in this trade\")\n}*/\n\n// ============================================================================================================================\n// Make Timestamp - create a timestamp in ms\n// ============================================================================================================================\nfunc makeTimestamp() int64 {\n    return time.Now().UnixNano() / (int64(time.Millisecond)/int64(time.Nanosecond))\n}\n\n// ============================================================================================================================\n// Remove Open Trade - close an open trade\n// ============================================================================================================================\n/*\nfunc (t *SimpleChaincode) remove_trade(stub shim.ChaincodeStubInterface, args []string) ([]byte, error) {\n\tvar err error\n\t\n\t//\t0\n\t//[data.id]\n\tif len(args) < 1 {\n\t\treturn nil, errors.New(\"Incorrect number of arguments. Expecting 1\")\n\t}\n\t\n\tfmt.Println(\"- start remove trade\")\n\ttimestamp, err := strconv.ParseInt(args[0], 10, 64)\n\tif err != nil {\n\t\treturn nil, errors.New(\"1st argument must be a numeric string\")\n\t}\n\t\n\t//get the open trade struct\n\ttradesAsBytes, err := stub.GetState(openTradesStr)\n\tif err != nil {\n\t\treturn nil, errors.New(\"Failed to get opentrades\")\n\t}\n\tvar trades AllTrades\n\tjson.Unmarshal(tradesAsBytes, &trades)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//un stringify it aka JSON.parse()\n\t\n\tfor i := range trades.OpenTrades{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//look for the trade\n\t\t//fmt.Println(\"looking at \" + strconv.FormatInt(trades.OpenTrades[i].Timestamp, 10) + \" for \" + strconv.FormatInt(timestamp, 10))\n\t\tif trades.OpenTrades[i].Timestamp == timestamp{\n\t\t\tfmt.Println(\"found the trade\");\n\t\t\ttrades.OpenTrades = append(trades.OpenTrades[:i], trades.OpenTrades[i+1:]...)\t\t\t\t//remove this trade\n\t\t\tjsonAsBytes, _ := json.Marshal(trades)\n\t\t\terr = stub.PutState(openTradesStr, jsonAsBytes)\t\t\t\t\t\t\t\t\t\t\t\t//rewrite open orders\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t}\n\t\t\tbreak\n\t\t}\n\t}\n\t\n\tfmt.Println(\"- end remove trade\")\n\treturn nil, nil\n}\n\n// ============================================================================================================================\n// Clean Up Open Trades - make sure open trades are still possible, remove choices that are no longer possible, remove trades that have no valid choices\n// ============================================================================================================================\nfunc cleanTrades(stub shim.ChaincodeStubInterface)(err error){\n\tvar didWork = false\n\tfmt.Println(\"- start clean trades\")\n\t\n\t//get the open trade struct\n\ttradesAsBytes, err := stub.GetState(openTradesStr)\n\tif err != nil {\n\t\treturn errors.New(\"Failed to get opentrades\")\n\t}\n\tvar trades AllTrades\n\tjson.Unmarshal(tradesAsBytes, &trades)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//un stringify it aka JSON.parse()\n\t\n\tfmt.Println(\"# trades \" + strconv.Itoa(len(trades.OpenTrades)))\n\tfor i:=0; i<len(trades.OpenTrades); {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//iter over all the known open trades\n\t\tfmt.Println(strconv.Itoa(i) + \": looking at trade \" + strconv.FormatInt(trades.OpenTrades[i].Timestamp, 10))\n\t\t\n\t\tfmt.Println(\"# options \" + strconv.Itoa(len(trades.OpenTrades[i].Willing)))\n\t\tfor x:=0; x<len(trades.OpenTrades[i].Willing); {\t\t\t\t\t\t\t\t\t\t\t\t\t\t//find a marble that is suitable\n\t\t\tfmt.Println(\"! on next option \" + strconv.Itoa(i) + \":\" + strconv.Itoa(x))\n\t\t\t_, e := findMarble4Trade(stub, trades.OpenTrades[i].User, trades.OpenTrades[i].Willing[x].Color, trades.OpenTrades[i].Willing[x].Size)\n\t\t\tif(e != nil){\n\t\t\t\tfmt.Println(\"! errors with this option, removing option\")\n\t\t\t\tdidWork = true\n\t\t\t\ttrades.OpenTrades[i].Willing = append(trades.OpenTrades[i].Willing[:x], trades.OpenTrades[i].Willing[x+1:]...)\t//remove this option\n\t\t\t\tx--;\n\t\t\t}else{\n\t\t\t\tfmt.Println(\"! this option is fine\")\n\t\t\t}\n\t\t\t\n\t\t\tx++\n\t\t\tfmt.Println(\"! x:\" + strconv.Itoa(x))\n\t\t\tif x >= len(trades.OpenTrades[i].Willing) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t//things might have shifted, recalcuate\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t\n\t\tif len(trades.OpenTrades[i].Willing) == 0 {\n\t\t\tfmt.Println(\"! no more options for this trade, removing trade\")\n\t\t\tdidWork = true\n\t\t\ttrades.OpenTrades = append(trades.OpenTrades[:i], trades.OpenTrades[i+1:]...)\t\t\t\t\t//remove this trade\n\t\t\ti--;\n\t\t}\n\t\t\n\t\ti++\n\t\tfmt.Println(\"! i:\" + strconv.Itoa(i))\n\t\tif i >= len(trades.OpenTrades) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//things might have shifted, recalcuate\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif(didWork){\n\t\tfmt.Println(\"! saving open trade changes\")\n\t\tjsonAsBytes, _ := json.Marshal(trades)\n\t\terr = stub.PutState(openTradesStr, jsonAsBytes)\t\t\t\t\t\t\t\t\t\t\t\t\t\t//rewrite open orders\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}else{\n\t\tfmt.Println(\"! all open trades are fine\")\n\t}\n\n\tfmt.Println(\"- end clean trades\")\n\treturn nil\n}\n*/",
			"file": "/C/Users/Gio/Desktop/ccpe_chaincode.go",
			"file_size": 27890,
			"file_write_time": 131329567069307394,
			"settings":
			{
				"buffer_size": 27163,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 127.0,
		"last_filter": "Snippet: ",
		"selected_items":
		[
			[
				"Snippet: ",
				"Snippet: html-html5skel"
			],
			[
				"Package",
				"Package Control: Install Package"
			],
			[
				"packinst",
				"Package Control: Install Package"
			],
			[
				"ftp",
				"Preferences: Package Control Settings – User"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read());",
			"import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/node/nodeapp-ws-blockchain",
		"/C/node/nodeapp-ws-blockchain/app-hyperledger",
		"/C/node/nodeapp-ws-blockchain/app-hyperledger/base",
		"/C/node/nodeapp-ws-blockchain/app-hyperledger/baseimage",
		"/C/node/nodeapp-ws-blockchain/app-webservice",
		"/C/node/nodeapp-ws-blockchain/app-webservice/routes",
		"/C/node/nodeapp-ws-blockchain/chaincode"
	],
	"file_history":
	[
		"/C/node/nodeapp-ws-blockchain/app-webservice/app.js",
		"/C/node/nodeapp-ws-blockchain/chaincode/ccpe_chaincode.go",
		"/C/node/nodeapp-ws-blockchain/app-webservice/package.json",
		"/D/Backup Muscle site/example.js",
		"/C/node/app-webservice/routes/index.js",
		"/D/Backup Node.js APP/node/app-webservice/routes/index.js",
		"/C/node/app-webservice/package.json",
		"/C/node/start.sh",
		"/C/node/app-webservice/Dockerfile",
		"/C/node/app/server.js",
		"/C/Users/Gio/AppData/Roaming/Sublime Text 3/Packages/User/Node.sublime-build",
		"/C/Users/Gio/AppData/Roaming/Sublime Text 3/Packages/User/node.sublime-build",
		"/C/node/app/node_server",
		"/C/Users/Gio/Envs/exchangeplatform/orderapp/templates/orderapp/place_order.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/includes/content-latest.html",
		"/C/Users/Gio/Documents/gocode/bin/hello.go",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/serializers.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/urls.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/api.py",
		"/C/Users/Gio/Envs/exchangeplatform/orderapp/models.py",
		"/C/Users/Gio/Envs/exchangeplatform/orderapp/forms.py",
		"/C/Users/Gio/Envs/exchangeplatform/orderapp/templates/orderapp/order.html",
		"/C/Users/Gio/Envs/exchangeplatform/orderapp/views.py",
		"/C/Users/Gio/Envs/exchangeplatform/orderapp/admin.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/pgw.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/views.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeplatform/settings.py",
		"/C/Users/Gio/Envs/exchangeplatform/orderapp/urls.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/static/exchangeapp/css/style.css",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/header.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/forms.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/static/exchangeapp/js/underscore-min.js",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/static/exchangeapp/js/backbone-min.js",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/models.py",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/forms.py",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/templates/sellerapp/profile/profile_home.html",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/templates/sellerapp/pay_membership.html",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/views.py",
		"/C/Users/Gio/Envs/exchangeplatform/orderapp/templates/orderapp/point_query.html",
		"/C/Users/Gio/Envs/exchangeplatform/adapp/forms.py",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/urls.py",
		"/C/Users/Gio/Envs/exchangeplatform/adapp/templates/adapp/create_ad.html",
		"/C/Users/Gio/Envs/exchangeplatform/adapp/templates/adapp/ad_form.html",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/templates/sellerapp/create_seller.html",
		"/C/Users/Gio/Envs/exchangeplatform_mine/exchangeplatform/settings.py",
		"/C/Users/Gio/Envs/exchangeplatform/adapp/views.py",
		"/C/Users/Gio/Envs/exchangeplatform/adapp/templates/adapp/show_ad.html",
		"/C/Users/Gio/Envs/blog/templates/index.html",
		"/C/Users/Gio/Envs/blog/templates/list.html",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/admin.py",
		"/C/Users/Gio/Envs/blog/posts/views.py",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/templates/sellerapp/profile/profile.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/models.py",
		"/C/Users/Gio/Envs/blog/posts/models.py",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/templates/sellerapp/profile/change_password.html",
		"/C/Users/Gio/AppData/Local/temp/Rar$DIa0.537/views.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/profile/profile.html",
		"/C/Users/Gio/AppData/Local/temp/Rar$DIa0.859/models.py",
		"/C/Users/Gio/Envs/exchangeplatform_mine/exchangeapp/models.py",
		"/C/Users/Gio/Envs/exchangeplatform_mine/adapp/models.py",
		"/C/Users/Gio/Envs/exchangeplatform_mine/exchangeapp/templates/exchangeapp/profile/profile.html",
		"/C/Users/Gio/AppData/Local/temp/Rar$DIa0.089/settings.py",
		"/C/Users/Gio/Envs/exchangeplatform/adapp/urls.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/profile/orders.html",
		"/D/Backup Django/exchangeplatform_04_12_2016/sellerapp/templates/sellerapp/add_seller.html",
		"/D/Backup Django/exchangeplatform_06_12_2016/orderapp/views.py",
		"/D/Backup Django/exchangeplatform_with_custom_reg/exchangeapp/templates/exchangeapp/register.html",
		"/C/Users/Gio/Envs/exchangeplatform/adapp/models.py",
		"/C/Users/Gio/AppData/Local/temp/Rar$DIa0.201/urls.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/includes/content-bottom.html",
		"/D/Backup Django/exchangeplatform_04_12_2016/exchangeplatform/settings.py",
		"/C/Users/Gio/AppData/Local/temp/Rar$DIa0.458/models.py",
		"/C/Users/Gio/AppData/Local/temp/Rar$DIa0.687/views.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/profile/addseller.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/profile/edit_profile.html",
		"/C/Users/Gio/AppData/Local/temp/Rar$DIa0.741/views.py",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/templates/sellerapp/profile/orders.html",
		"/C/Users/Gio/Envs/exchangeplatform/adapp/templates/adapp/sellerlogin.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/registration/login.html",
		"/C/Users/Gio/Envs/mysite/books/views.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/auth/user_form.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/profile/addseller_success.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/admin.py",
		"/C/Users/Gio/Envs/mysite/books/admin.py",
		"/C/Users/Gio/AppData/Local/temp/Rar$DIa0.320/views.py",
		"/D/Backup Django/exchangeplatform_06_12_2016/exchangeapp/views.py",
		"/C/Users/Gio/Envs/blog/posts/forms.py",
		"/C/Users/Gio/Envs/blog/posts/urls.py",
		"/C/Users/Gio/Envs/blog/blog/urls.py",
		"/D/Web Development/Python/Udemy/try-django-19-master/try-django-19-master/src/posts/views.py",
		"/D/Web Development/Python/Udemy/try-django-19-master/try-django-19-master/src/templates/post_form.html",
		"/C/Users/Gio/Envs/blog/templates/post_detail.html",
		"/C/Users/Gio/Envs/blog/templates/post_form.html",
		"/D/Web Development/Python/Udemy/try-django-19-master/try-django-19-master/src/templates/post_detail.html",
		"/D/Web Development/Python/Udemy/try-django-19-master/try-django-19-master/src/posts/urls.py",
		"/C/Users/Gio/Envs/exchangeplatform_06_12_2016/exchangeplatform/settings.py",
		"/C/Users/Gio/Envs/blog/posts/admin.py",
		"/C/Users/Gio/Envs/exchangeplatform_04_12_2016/exchangeplatform/settings.py",
		"/C/Users/Gio/Envs/exchangeplatform1/orderapp/forms.py",
		"/C/Users/Gio/Envs/exchangeplatform1/orderapp/models.py",
		"/C/Users/Gio/Envs/exchangeplatform1/exchangeplatform/settings.py",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/templates/sellerapp/seller_success.html",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/templates/sellerapp/add_seller.html",
		"/C/Users/Gio/Envs/exchangeplatform/orderapp/templates/orderapp/order_success.html",
		"/C/Users/Gio/Envs/myproject/Scripts/django-admin.py",
		"/D/Tutorials/Lynda - Ajax with PHP/Exercise Files/Chapter_02/02_05-final/ajax_zipcode/index.html",
		"/D/Tutorials/Lynda - Ajax with PHP/Exercise Files/Chapter_02/02_04-final/ajax_text/index.html",
		"/D/Tutorials/Lynda - Ajax with PHP/Exercise Files/Chapter_03/03_02-final/ajax_html/index.html",
		"/D/Tutorials/Lynda - Ajax with PHP/Exercise Files/Chapter_02/02_04/ajax_text/index.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeplatform/urls.py",
		"/C/Users/Gio/Envs/exchangeplatform/views.py",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/templates/sellerapp/profile.html",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/templates/sellerapp/sellerlogin.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/registration/registration_form.html",
		"/C/Users/Gio/Envs/exchangeplatform/sellerapp/templates/test.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/profile_form.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/admin/base_site.html",
		"/C/Users/Gio/Envs/exchangeplatform/manage.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/404.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/profile.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/signup.html",
		"/C/xampp/htdocs/igeomarket/application/views/layout/header.php",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/registration/logout.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/usersignup.html",
		"/F/1/exchangeplatform/exchangeplatform/settings.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/exchangeapp/home.html",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/ragbackend.py",
		"/C/Users/Gio/Envs/exchangeplatform/exchangeapp/templates/registration/activate.html"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"();\n",
			"my_cc",
			"deploy",
			"hello_world",
			"Query",
			"run",
			"consensus",
			"deploy",
			"http",
			"my_cc",
			"g_cc",
			"deploy",
			"init_transaction",
			"minimalTxStr",
			"tmpStr",
			"tmpRelatedPoint",
			"trades",
			"minimalTxStr",
			"tmpStr",
			"tmpRelatedPoint",
			"cc",
			"user_balance",
			"Http",
			"us_name",
			"addseller",
			"objects",
			"messages",
			"DATE",
			"DATE_FORMAT",
			"formats",
			"update",
			"add_seller",
			"orders.html",
			"container",
			"layout",
			"container",
			"color",
			"TEMPLAT",
			"templa",
			"focus",
			".navbar",
			".navbar-default .navbar-nav",
			"order",
			"posta",
			"logo",
			"TEST_RUNNER",
			"ph.jpg",
			"calculateAndDisplayRoute",
			"marker"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "start.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 825,
						"regions":
						{
						},
						"selection":
						[
							[
								825,
								825
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app-webservice/Dockerfile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 274,
						"regions":
						{
						},
						"selection":
						[
							[
								251,
								251
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "app-webservice/routes/index.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5574,
						"regions":
						{
						},
						"selection":
						[
							[
								4876,
								4891
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 592.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "chaincode/ccpe_chaincode.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7950,
						"regions":
						{
						},
						"selection":
						[
							[
								2928,
								2928
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 836.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/Gio/Desktop/ccpe_chaincode.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27163,
						"regions":
						{
						},
						"selection":
						[
							[
								5853,
								5853
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1827.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 21.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 33.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.sftp":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/Node.sublime-build",
	"project": "ibm-blockchain-node.js",
	"replace":
	{
		"height": 38.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 305.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
